/*
 * Template group pour la génération de code MicroPython
 * Utilisé par CodeGenVisitorST pour produire du code MicroPython
 * à partir de l'AST EMJ
 */

// Template pour le programme complet
program(functions, body) ::= <<
# Code généré à partir d'un programme EMJ
from microbit import *

<if(functions)>
# Fonctions utilisateur
<functions; separator="\n\n">
<endif>
<body; separator="\n">
>>

// Template pour la fonction principale
mainFunction(body) ::= <<
<body; separator="\n">
>>

// Template pour la déclaration de fonctions
functionDecl(name, parameters, body, return) ::= <<
def <name>(<parameters; separator=", ">):
<body; separator="\n">
<if(return)>
    return <return>
<else>
    ; # No return
<endif>
>>

// Template pour les paramètres de fonction
parameter(name)::= "<name>"

// Templates pour les types de données
mapType ::= [
  "INT":"int",
  "BOOL":"bool",
  "CHAR":"str",
  "STRING":"str",
  "TUPLE":"tuple",
  "VOID":"None",
  default:"None"
]

// Templates pour les déclarations de variables
varDecl(name, type, value, indent) ::= "<indent><name> = <value>"

// Templates pour l'assignation de variable
assignment(left, right, indent) ::= "<indent><left> = <right>"

// EXPRESSIONS
// Template pour additiveExpression
additiveExpression(left, rights) ::= <<<left> <if(rights)><rights; separator=" "><endif> >>

// Template pour multiplicativeExpression
multiplicativeExpression(left, rights) ::= <<<left> <if(rights)><rights; separator=" "><endif> >>

// Template pour unaryExpression
unaryExpression(minus, code)::= <<<if(minus)>-<endif><primaryExpression(code)> >>

// Template pour primaryExpression
primaryExpression(code)::= "<code>"

// CARTE
// Template principal pour un fichier de carte
map_program(width, height, orientation, map) ::= <<
# Carte générée à partir d'un fichier EMJ (.map)

# Dimensions
width = <width>
height = <height>
orientation = "<orientation>"

# Carte (chaîne de caractères ligne par ligne)
map_data = [
    <map; separator=",\n">
]
>>

// Return statement
return(value) ::= "return <value>"

// If Statement
ifStatement(body) ::= <<
<body; separator="\n">
>>

// Template pour les blocs
block(body) ::= <<
<body; separator="\n">
>>

// Template pour les boucles (while et for)
loopStatement(body) ::= <<
<body; separator="\n">
>>

// Template pour les instructions prédéfinies
predefinedStmt(code) ::= "<code>"
