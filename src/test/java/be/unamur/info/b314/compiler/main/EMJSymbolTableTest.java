package be.unamur.info.b314.compiler.main;

import be.unamur.info.b314.compiler.emj.EMJSymbolTable;
import be.unamur.info.b314.compiler.emj.EMJSymbolInfo;
import be.unamur.info.b314.compiler.emj.EMJParameterInfo;
import org.junit.Test;
import org.junit.Rule;
import org.junit.rules.TemporaryFolder;
import org.junit.rules.TestRule;
import org.junit.rules.TestWatcher;
import org.junit.runner.Description;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

/**
 * Tests pour la table des symboles EMJ
 * 
 * Ce test v√©rifie le bon fonctionnement de la m√©thode displaySymbolTable()
 */
public class EMJSymbolTableTest {
    
    private static final Logger logger = LoggerFactory.getLogger(EMJSymbolTableTest.class);
    
    @Rule
    public TemporaryFolder testFolder = new TemporaryFolder(); // Cr√©e un dossier temporaire pour les tests
    
    @Rule
    public TestRule watcher = new TestWatcher() {
        @Override
        protected void starting(Description description) {
            logger.info(String.format("Starting test: %s()...",
                    description.getMethodName()));
        }
    };
    
    @Test
    public void testSymbolTableDisplay() throws Exception {
        // Cr√©er une instance de EMJSymbolTable
        EMJSymbolTable symbolTable = new EMJSymbolTable();
        
        // ---- VARIABLES GLOBALES ----
        // Variables num√©riques (utilisation de üî¢ pour INT)
        symbolTable.addVariable("üëå", "INT", true);       // emoji OK vu dans les exemples
        symbolTable.addVariable("compteur", "INT", true);
        symbolTable.addVariable("üéÆ", "INT", false);      // emoji manette (vu dans les tests)
        
        // Variables textuelles (utilisation de üî° pour STRING)
        symbolTable.addVariable("message", "STRING", true);
        symbolTable.addVariable("ü¶Ö", "STRING", false);   // emoji aigle (vu dans les tests)
        
        // Variables bool√©ennes (utilisation de üîö pour BOOL)
        symbolTable.addVariable("estActif", "BOOL", true);
        symbolTable.addVariable("üçå", "BOOL", false);     // emoji banane (vu dans les tests)
        
        // Tableaux (utilisation de üìö pour les tableaux)
        symbolTable.addVariable("tableauTest", "INT[]", true);
        
        // ---- FONCTIONS ----
        // Fonction main (toujours pr√©sente dans EMJ avec emoji üè†)
        symbolTable.addFunction("üè†", "VOID", new ArrayList<>());

        // Fonction void avec l'emoji üåÄ (vu dans les exemples)
        List<EMJParameterInfo> params1 = new ArrayList<>();
        symbolTable.addFunction("üåÄ", "VOID", params1);
        
        // Fonction de d√©placement (emoji ‚¨ÜÔ∏è - fl√®che vers le haut)
        List<EMJParameterInfo> directionParams = new ArrayList<>();
        directionParams.add(new EMJParameterInfo("steps", "INT"));
        symbolTable.addFunction("‚¨ÜÔ∏è", "VOID", directionParams);
        
        // Fonction de calcul avec retour d'entier
        List<EMJParameterInfo> calcParams = new ArrayList<>();
        calcParams.add(new EMJParameterInfo("a", "INT"));
        calcParams.add(new EMJParameterInfo("b", "INT"));
        symbolTable.addFunction("calculerSomme", "INT", calcParams);
        
        // Fonction d'affichage sans param√®tres (attendue par les assertions)
        symbolTable.addFunction("afficherMessage", "VOID", new ArrayList<>());
        
        // ---- PORT√âES LOCALES ----
        // Port√©e de boucle (utilisation de üîÇ pour les boucles, vu dans les tests)
        symbolTable.enterScope("loop");
        symbolTable.addVariable("i", "INT", true);          // variable d'it√©ration classique
        symbolTable.addVariable("compteurBoucle", "INT", true);  // compteur dans la boucle
        
        // Port√©e conditionnelle dans la boucle (‚§¥Ô∏è pour les conditions)
        symbolTable.enterScope("if");
        symbolTable.addVariable("etatValeur", "STRING", true);   // variable dans condition
        
        // Remonter √† la port√©e de la boucle
        symbolTable.exitScope();  // sortir de "if"
        
        // Cr√©er une autre port√©e de fonction
        symbolTable.exitScope();  // sortir de "loop"
        symbolTable.enterScope("afficherResultat");
        symbolTable.addVariable("temp", "INT", true);         // variable locale fonction
        symbolTable.addVariable("resultatMessage", "STRING", true); // variable locale
        
        // Rediriger System.out pour capturer la sortie
        ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        PrintStream originalOut = System.out;
        System.setOut(new PrintStream(outContent));
        
        try {
            // Appel de la fonction √† tester pour capturer la sortie
            symbolTable.displaySymbolTable();
            
            // R√©cup√©rer la sortie captur√©e
            String output = outContent.toString();
            
            // Restaurer temporairement System.out pour afficher la table des symboles
            System.setOut(originalOut);
            System.out.println("\n******** AFFICHAGE DE LA TABLE DES SYMBOLES DURANT LE TEST ********");
            symbolTable.displaySymbolTable();
            System.out.println("******** FIN DE L'AFFICHAGE DE TEST ********\n");
            
            // Remettre le flux de capture pour la suite du test
            System.setOut(new PrintStream(outContent));
            
            // V√©rifier que la sortie contient les noms des variables et fonctions
            assertTrue("La sortie devrait contenir la variable 'compteur'", 
                    output.contains("compteur"));
            assertTrue("La sortie devrait contenir la variable 'message'", 
                    output.contains("message"));
            assertTrue("La sortie devrait contenir la fonction 'calculerSomme'", 
                    output.contains("calculerSomme"));
            assertTrue("La sortie devrait contenir la fonction 'afficherMessage'", 
                    output.contains("afficherMessage"));
            assertTrue("La sortie devrait contenir la variable locale 'i'", 
                    output.contains("i"));
            
            // V√©rifier que les port√©es sont correctement affich√©es
            assertTrue("La sortie devrait contenir la port√©e globale", 
                    output.contains("global"));
            assertTrue("La sortie devrait contenir la port√©e locale", 
                    output.contains("global.loop"));
            
            // V√©rifier que le formatage est correct
            assertTrue("Le formatage devrait inclure des sections pour les variables", 
                    output.contains("VARIABLES"));
            assertTrue("Le formatage devrait inclure des sections pour les fonctions", 
                    output.contains("FONCTIONS"));
            
            logger.info("Test d'affichage de la table des symboles r√©ussi");
        } finally {
            // Restaurer System.out
            System.setOut(originalOut);
        }
    }
    
    // Note: Ce test a √©t√© comment√© car il n√©cessite CompilerTestHelper qui n'est pas accessible
    // Pour tester avec un fichier r√©el EMJ, il faudrait √©tendre le test
    // en utilisant Main.main() directement
    /*
    @Test
    public void testSymbolTableWithEmojScript() throws Exception {
        // Ce test pourrait √™tre impl√©ment√© autrement pour appeler directement le Main
        // Avec acc√®s √† la table des symboles apr√®s analyse
    }
    */
}
